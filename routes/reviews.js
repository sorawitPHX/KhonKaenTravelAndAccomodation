const express = require("express");
const router = express.Router();
const { PrismaClient } = require("@prisma/client");
const { requireAuthApi } = require('../middlewares/authMiddleware')

const prisma = new PrismaClient();

// üìå ‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/:type/:id", async (req, res) => {
    try {
        const { type, id } = req.params;
        let reviews;
        if (type === "tourism") {
            reviews = await prisma.review.findMany({
                where: { tourismSpotId: parseInt(id) },
                include: { user: true, reviewLikes: true }
            });
        } else if (type === "accommodation") {
            reviews = await prisma.review.findMany({
                where: { accommodationSpotId: parseInt(id) },
                include: { user: true, reviewLikes: true }
            });
        } else {
            return res.status(400).json({ error: "Invalid type" });
        }

        res.json(reviews);
    } catch (error) {
        res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß" });
    }
});


// üìå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà
router.post('/', requireAuthApi, async (req, res) => {
    let { type, placeId, rating, comment } = req.body;
    const userId = req.session.userId;
    placeId = parseInt(placeId)
    rating = parseInt(rating)
    if (!userId) {
        return res.status(401).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" });
    }

    let newReview;
    if (type === "tourism") {
        newReview = await prisma.review.create({
            data: { userId, tourismSpotId: parseInt(placeId), rating, comment }
        });
    } else if (type === "accommodation") {
        newReview = await prisma.review.create({
            data: { userId, accommodationSpotId: parseInt(placeId), rating, comment }
        });
    } else {
        return res.status(400).json({ error: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    res.json(newReview);
});

// üìå ‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
router.delete("/:id", requireAuthApi, async (req, res) => {
    try {
        const { id } = req.params;
        await prisma.review.delete({ where: { id: parseInt(id) } });
        res.json({ message: "‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
    } catch (error) {
        console.log(error)
        res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏î‡πâ" });
    }
});

// üìå ‡∏Å‡∏î‡πÑ‡∏•‡∏Å‡πå / ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏•‡∏Å‡πå ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
router.post("/:reviewId/like", requireAuthApi, async (req, res) => {
    try {
        const { reviewId } = req.params;
        const userId = req.session.userId;

        if (!userId) return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ userId" });

        const existingLike = await prisma.reviewLike.findFirst({
            where: { reviewId: parseInt(reviewId), userId }
        });

        if (existingLike) {
            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏•‡∏Å‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß -> ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å (Unlike)
            await prisma.reviewLike.delete({
                where: { id: existingLike.id }
            });
            return res.status(200).json({ message: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏•‡∏Å‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
        } else {
            // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏Å‡∏î‡πÑ‡∏•‡∏Å‡πå -> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏•‡∏Å‡πå
            const like = await prisma.reviewLike.create({
                data: { reviewId: parseInt(reviewId), userId }
            });
            return res.status(201).json(like);
        }
    } catch (error) {
        res.status(400).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡πÑ‡∏•‡∏Å‡πå/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏•‡∏Å‡πå‡πÑ‡∏î‡πâ" });
    }
});

module.exports = router;
