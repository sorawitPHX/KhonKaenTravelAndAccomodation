const express = require("express");
const router = express.Router();
const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();

// üìå ‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/", async (req, res) => {
    try {
        const reviews = await prisma.review.findMany({
            include: {
                user: true,
                tourismSpot: true,
                accommodationSpot: true,
                reviewLikes: true,
            },
        });
        res.json(reviews);
    } catch (error) {
        res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß" });
    }
});

// üìå ‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß
router.get("/tourism/:tourismSpotId", async (req, res) => {
    try {
        const { tourismSpotId } = req.params;
        const reviews = await prisma.review.findMany({
            where: { tourismSpotId: parseInt(tourismSpotId) },
            include: { user: true, reviewLikes: true },
        });
        res.json(reviews);
    } catch (error) {
        res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ" });
    }
});

// üìå ‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å
router.get("/accommodation/:accommodationSpotId", async (req, res) => {
    try {
        const { accommodationSpotId } = req.params;
        const reviews = await prisma.review.findMany({
            where: { accommodationSpotId: parseInt(accommodationSpotId) },
            include: { user: true, reviewLikes: true },
        });
        res.json(reviews);
    } catch (error) {
        res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ" });
    }
});

// üìå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà
router.post("/", async (req, res) => {
    try {
        const { userId, tourismSpotId, accommodationSpotId, comment, rating } = req.body;

        if (!userId || !rating || (!tourismSpotId && !accommodationSpotId)) {
            return res.status(400).json({ error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
        }

        const review = await prisma.review.create({
            data: { userId, tourismSpotId, accommodationSpotId, comment, rating },
        });

        res.status(201).json(review);
    } catch (error) {
        res.status(400).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏î‡πâ" });
    }
});

// üìå ‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
router.delete("/:id", async (req, res) => {
    try {
        const { id } = req.params;
        await prisma.review.delete({ where: { id: parseInt(id) } });
        res.json({ message: "‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
    } catch (error) {
        res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏î‡πâ" });
    }
});

// üìå ‡∏Å‡∏î‡πÑ‡∏•‡∏Å‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
router.post("/:reviewId/like", async (req, res) => {
    try {
        const { reviewId } = req.params;
        const { userId } = req.body;

        if (!userId) return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ userId" });

        const like = await prisma.reviewLike.create({
            data: { reviewId: parseInt(reviewId), userId },
        });

        res.status(201).json(like);
    } catch (error) {
        res.status(400).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡πÑ‡∏•‡∏Å‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏î‡πâ" });
    }
});

module.exports = router;
